#include "corne.h"

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE>;
};

/ {

  combos {
    #include "combos.dtsi"
  };

  behaviors {
		MORPH(TIcolon, DK_COLN, DK_SCOLN, MOD_LSFT)
		MORPH(del, BACKSPACE, DELETE, MOD_LSFT)
		MORPH(dot_override, DOT, DK_AMPR, MOD_LSFT)
		MORPH(slsh_override, DK_SLSH, DK_ASTR, MOD_LSFT)
		MORPH(dquot_override, DK_DQT, DK_QUES, MOD_LSFT)
		MORPH(quot_override, DK_SQT, EXCL, MOD_LSFT)
		MORPH(comm_override, COMMA, DK_BAR, MOD_LSFT)
		lhm: left_hand_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "LEFT_POSITIONAL_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <TAPPING_TERM>;                 // <---[[produces tap if held longer than tapping-term-ms]]
			quick-tap-ms = <QUICK_TAPPING_TERM>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = RIGHT_POSITIONS;    // <---[[right-hand keys]]
		};
		rhm: right_hand_positional_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "RIGHT_POSITIONAL_HOLD_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <TAPPING_TERM>;                 // <---[[produces tap if held longer than tapping-term-ms]]
			quick-tap-ms = <QUICK_TAPPING_TERM>;
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = LEFT_POSITIONS;    // <---[[right-hand keys]]
		};
	};

  keymap {
    compatible = "zmk,keymap";

    base_layer {
      label = "BASE";
      bindings = <
        // ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
            &bt BT_SEL 0 &kp X       &kp F       &kp L       &kp D       &kp B           &kp DK_MINS &kp U       &kp O       &kp Y       &kp K       XXX
        // ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤
            &bt BT_SEL 1 &lhm LALT C &lhm LGUI S &lhm LCTL N &lhm LSFT T &kp W           &kp COMMA  &rhm LSFT A &rhm LCTL E &rhm LGUI I &rhm LALT H  XXX
        // ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤
            &bt BT_CLR   &kp J       &kp G       &kp M       &kp P       &kp V           &kp DK_COLN &kp DOT     &kp DK_SLSH &kp DK_DQT  &kp DK_SQT  XXX
        // ╰───────────┴───────────┴───────────┴───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┴───────────┴───────────┴───────────╯
                                                 &kp ESC     &lt NAV R   &kp TAB     &lt SYM ENTER &lt NUM SPACE  &kp BSPC
        //                                     ╰───────────┴───────────┴───────────╯   ╰───────────┴───────────┴───────────╯
      >;
    };

    nav_layer {
      label = "NAV";
      bindings = <
        // ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
             XXX         XXX         XXX         XXX         XXX         XXX             &kp UC_CUT  &kp UC_CPY  &kp UC_PST  &kp UC_UND  &kp UC_RDO  XXX
        // ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤
             XXX         &kp LALT    &kp LCMD    &kp LCTL    &kp LSHFT   XXX             &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &caps_word  XXX
        // ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤
             XXX         &to NAV     XXX         XXX         XXX         XXX             &kp HOME    &kp PG_DN   &kp PG_UP   &kp END     &kp INS     XXX
        // ╰───────────┴───────────┴───────────┴───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┴───────────┴───────────┴───────────╯
                                                 &kp ESC     &to BASE    &kp ENTER       &kp TAB     &kp SPACE   &kp BSPC
        //                                     ╰───────────┴───────────┴───────────╯   ╰───────────┴───────────┴───────────╯
      >;
    };

    num_layer {
      label = "NUM";
      bindings = <
        // ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
             XXX         &kp DK_LBRC &kp 6       &kp 5       &kp 4       &kp DK_RBRC      XXX         XXX         XXX         XXX         XXX         XXX
        // ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤
             XXX         &kp DK_LPRN &kp 3       &kp 2       &kp 1       &kp DK_RPRN      &kp SPACE   &kp LSHFT   &kp LCTL    &kp LCMD    &kp LALT    &kp BSPC
        // ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤
             XXX         &kp DK_LBKT &kp 9       &kp 8       &kp 7       &kp DK_RBKT      &kp ENTER   XXX         XXX         XXX         &to NUM     XXX
        // ╰───────────┴───────────┴───────────┴───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┴───────────┴───────────┴───────────╯
                                                 &kp DOT     &kp 0       &kp DK_MINS     &kp TAB     &to BASE   &kp BSPC
        //                                     ╰───────────┴───────────┴───────────╯   ╰───────────┴───────────┴───────────╯
      >;
    };


    sym_layer {
      label = "SYM";
      bindings = <
        // ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮   ╭───────────┬───────────┬───────────┬───────────┬───────────┬───────────╮
             XXX        &kp DK_LBRC  &kp DK_CIRC &kp PRCNT   &kp DK_DLLR &kp DK_RBRC     XXX         XXX         XXX         XXX         XXX         XXX
        // ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤
             XXX        &kp DK_LPRN  &kp HASH    &kp DK_AT   &kp EXCL    &kp DK_RPRN     XXX         &kp LSHFT   &kp LCTL    &kp LCMD    &kp LALT    XXX
        // ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤   ├───────────┼───────────┼───────────┼───────────┼───────────┼───────────┤
             XXX        &kp DK_LBKT  &kp DK_LT   &kp DK_ASTR &kp DK_AMPR &kp DK_RBKT     XXX         XXX         XXX         XXX         &to SYM     XXX
        // ╰───────────┴───────────┴───────────┼───────────┼───────────┤───────────┤   ├───────────┼───────────┼───────────┴───────────┴───────────┴───────────╯
                                                 &kp ESC     &kp T       &kp ENTER       &to BASE   &kp SPACE   &kp BSPC
        //                                     ╰───────────┴───────────┴───────────╯   ╰───────────┴───────────┴───────────╯
      >;
    };

  };
};
